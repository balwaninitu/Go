package main

import (
	"context"
	"net"

	"youtube-tensor-programming-go-microservices/3-gRPC/proto"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

type server struct{}

/*gRPC makes you serve HTTP 2 protocol that give lot of benefits
and it uses along with another technology called protocol buffers
to make extremely quick and performant rpc
one of gRPC feature is it is language agnostic meaning buiild
server in one language and client in another also protobuffer is
language neutral */

/*in proto folder proto files created to show struct
then paste google folder which is under included from protoc is pasted under
third_party folder and then type on terminal below o show path to generate
service.pb.go file under proto folder which has many methods related to struct
type on terminal - protoc --proto_path=proto --proto_path=third_party --go_out=plugins=grpc:proto service.proto
type */

/*server struct created so that it implement the interface generated by
  service.pb.go file i.e. AddServiceServer interface which has add and multiply metho*/

func main() {
	listener, err := net.Listen("tcp", ":4040")
	if err != nil {
		panic(err)
	}
	/*newServer create new grpc server and
	  we register our service on that server using type we created*/
	srv := grpc.NewServer()
	proto.RegisterAddServiceServer(srv, &server{})
	/*for serializing and deseriaizing data
	  we need to use reflection from gRPC library*/
	reflection.Register(srv)

	if e := srv.Serve(listener); e != nil {
		panic(e)
	}

}
func (s *server) Add(ctx context.Context, request *proto.Request) (*proto.Response, error) {
	a, b := request.GetA(), request.GetB()

	result := a + b
	return &proto.Response{Result: result}, nil
}

func (s *server) Multiply(ctx context.Context, request *proto.Request) (*proto.Response, error) {
	a, b := request.GetA(), request.GetB()
	result := a * b

	return &proto.Response{Result: result}, nil

}
